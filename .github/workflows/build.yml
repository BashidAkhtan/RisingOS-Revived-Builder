name: RisingOS Revived Builder

on:
  workflow_dispatch:
    inputs:
      BRAND:
        description: 'Put your device manufacturer name please.'
        required: true
      CODENAME:
        description: 'Put your device codename please.'
        required: true
      TYPE:
        description: 'The build type. Set to "userdebug" by default.'
        required: true
        default: 'userdebug'
        type: choice
        options:
          - 'eng'
          - 'user'
          - 'userdebug'
      VARIANT:
        description: 'If you wanna build other variants like vanilla, core or gapps.'
        required: false
        default: 'VANILLA'
        type: choice
        options:
          - 'VANILLA'
          - 'CORE'
          - 'GAPPS'

permissions:
  actions: write
  contents: write
  statuses: write

run-name: "RisingOS Build for ${{ inputs.BRAND }} ${{ inputs.CODENAME }} [${{ inputs.TYPE }} & ${{ inputs.VARIANT }}]"

jobs:
  check-limit:
    runs-on: ubuntu-latest
    outputs:
      authorized: ${{ steps.check_user.outputs.authorized }}
      core: ${{ steps.check_user.outputs.core }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check User Authorization
        id: check_user
        run: |
          if [[ ! -f "authorized_users.json" ]]; then
            echo "authorized_users.json not found"
            exit 1
          fi

          # Check for authorization (plain username or CORE:username)
          if jq -e "index(\"${{ github.actor }}\")" authorized_users.json > /dev/null || jq -e "index(\"CORE:${{ github.actor }}\")" authorized_users.json > /dev/null; then
            echo "authorized=true" >> $GITHUB_OUTPUT

            # Check for core status (CORE:username)
            if jq -e "index(\"CORE:${{ github.actor }}\")" authorized_users.json > /dev/null; then
              echo "core=true" >> $GITHUB_OUTPUT
            else
              echo "core=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "authorized=false" >> $GITHUB_OUTPUT
            echo "User ${{ github.actor }} is not authorized to trigger this build."
            exit 1
          fi

      - name: Check Builds Limit
        id: check_limit
        if: ${{ steps.check_user.outputs.authorized == 'true' }}
        run: |
          echo "Debugging: core output is: '${{ steps.check_user.outputs.core }}'"
          COUNTER_FILE=".github/workflow_counter.json"
          CURRENT_DATE=$(date +%Y-%m-%d)
          DEVICE=${{ inputs.CODENAME }}

          if [[ ! -f "$COUNTER_FILE" ]] || ! jq empty "$COUNTER_FILE" 2>/dev/null; then
            echo '{}' > "$COUNTER_FILE"
          fi

          TODAY_RUNS=$(jq -r --arg device "$DEVICE" --arg date "$CURRENT_DATE" \
            'if .[$device][$date] then .[$device][$date] else 0 end' "$COUNTER_FILE")

          if [[ ! "$TODAY_RUNS" =~ ^[0-9]+$ ]]; then
            TODAY_RUNS=0
          fi

          echo "Today's runs for device $DEVICE: $TODAY_RUNS"

          if [[ "${{ steps.check_user.outputs.core }}" == "true" ]]; then
            LIMIT=-1  # Core users have no limit
          else
            LIMIT=3  # Non-core users have a limit of 3 runs
          fi

          if [[ $LIMIT -ne -1 && "$TODAY_RUNS" -ge $LIMIT ]]; then
            echo "Device $DEVICE has reached the daily limit of $LIMIT workflow runs."
            exit 1
          fi

          NEW_RUNS=$((TODAY_RUNS + 1))
          jq --arg device "$DEVICE" --arg date "$CURRENT_DATE" --argjson runs "$NEW_RUNS" \
            'del(.[$device]) | .[$device][$date] = $runs' "$COUNTER_FILE" > tmp.json && mv tmp.json "$COUNTER_FILE"

          echo "Updated run count for device $DEVICE: $NEW_RUNS"

      - name: Commit and push counter update
        if: ${{ steps.check_limit.outcome == 'success' }}
        run: |
          COUNTER_FILE=".github/workflow_counter.json"
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add $COUNTER_FILE
          git commit -m "Update workflow run count for device ${{ inputs.CODENAME }}"
          git push

  build:
    needs: check-limit
    if: ${{ needs.check-limit.outputs.authorized == 'true' }}
    runs-on: self-hosted
    env:
      USERNAME: ${{ github.actor }}
      BRAND: ${{ inputs.BRAND }}
      CODENAME: ${{ inputs.CODENAME }}
      TYPE: ${{ inputs.TYPE }}
      VARIANT: ${{ inputs.VARIANT }}
      BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      THREAD_ID: ${{ secrets.TELEGRAM_THREAD_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Notify Build Start
        run: bash telegram_notify.sh "Build for ${{ inputs.CODENAME }} started." "$BOT_TOKEN" "$CHAT_ID" "$THREAD_ID" "$USERNAME"

      - name: Init and Sync
        run: bash resync.sh

      - name: Clone Repositories
        run: |
          bash clone.sh

      - name: Set flags
        run: bash misc/flags.sh

      - name: Build RisingOS
        run: bash build.sh

      - name: Upload Build Files to Gofile
        id: upload_files
        run: bash upload.sh

      - name: Capture Gofile Links
        if: ${{ steps.upload_files.outcome == 'success' }}
        run: |
          echo "ROM_GOFILE_LINKS=$(cat $GITHUB_ENV | grep -oE "ROM_GOFILE_LINKS=[^ ]*")" >> $GITHUB_OUTPUT
          echo "BOOT_IMG_LINK=$(cat $GITHUB_ENV | grep -oE "BOOT_IMG_LINK=[^ ]*")" >> $GITHUB_OUTPUT
          echo "DTBO_IMG_LINK=$(cat $GITHUB_ENV | grep -oE "DTBO_IMG_LINK=[^ ]*")" >> $GITHUB_OUTPUT
          echo "VENDOR_BOOT_IMG_LINK=$(cat $GITHUB_ENV | grep -oE "VENDOR_BOOT_IMG_LINK=[^ ]*")" >> $GITHUB_OUTPUT
          echo "RECOVERY_IMG_LINK=$(cat $GITHUB_ENV | grep -oE "RECOVERY_IMG_LINK=[^ ]*")" >> $GITHUB_OUTPUT
        id: gofile_links

      - name: Post-Cleanup
        if: ${{ always() }}
        run: bash clean.sh

      - name: Notify Build Success (Telegram)
        if: ${{ success() }}
        run: |
          MESSAGE="Build for ${{ inputs.CODENAME }} succeeded!"
          ROM_LINK=$(echo "${{ steps.gofile_links.outputs.ROM_GOFILE_LINKS }}" | sed 's/^ROM_GOFILE_LINKS=//')
          BOOT_LINK=$(echo "${{ steps.gofile_links.outputs.BOOT_IMG_LINK }}" | sed 's/^BOOT_IMG_LINK=//')
          DTBO_LINK=$(echo "${{ steps.gofile_links.outputs.DTBO_IMG_LINK }}" | sed 's/^DTBO_IMG_LINK=//')
          VENDOR_BOOT_LINK=$(echo "${{ steps.gofile_links.outputs.VENDOR_BOOT_IMG_LINK }}" | sed 's/^VENDOR_BOOT_IMG_LINK=//')
          RECOVERY_LINK=$(echo "${{ steps.gofile_links.outputs.RECOVERY_IMG_LINK }}" | sed 's/^RECOVERY_IMG_LINK=//')

          if [[ -n "$ROM_LINK" ]]; then
            MESSAGE="$MESSAGE\nROM: $ROM_LINK"
          fi
          if [[ -n "$BOOT_LINK" ]]; then
            MESSAGE="$MESSAGE\nBoot: $BOOT_LINK"
          fi
          if [[ -n "$DTBO_LINK" ]]; then
            MESSAGE="$MESSAGE\nDTBO: $DTBO_LINK"
          fi
          if [[ -n "$VENDOR_BOOT_LINK" ]]; then
            MESSAGE="$MESSAGE\nVendor Boot: $VENDOR_BOOT_LINK"
          fi
          if [[ -n "$RECOVERY_LINK" ]]; then
            MESSAGE="$MESSAGE\nRecovery: $RECOVERY_LINK"
          fi

          bash telegram_notify.sh "$MESSAGE" "$BOT_TOKEN" "$CHAT_ID" "$THREAD_ID" "$USERNAME" "✅"

      - name: Notify Build Failure (Telegram)
        if: ${{ failure() }}
        run: bash telegram_notify.sh "Build for ${{ inputs.CODENAME }} failed." "$BOT_TOKEN" "$CHAT_ID" "$THREAD_ID" "$USERNAME" "❌"

      - name: Notify Build Cancelled
        if: ${{ cancelled() }}
        run: bash telegram_notify.sh "Build for ${{ inputs.CODENAME }} cancelled." "$BOT_TOKEN" "$CHAT_ID" "$THREAD_ID" "$USERNAME" "❌"
